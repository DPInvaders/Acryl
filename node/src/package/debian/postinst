${{header}}
${{loader-functions}}
${{detect-loader}}

config_file=/etc/${{app_name}}/acryl.conf
old_home_directory=/home/acryl
old_data_directory=$old_home_directory/acryl

if [ "$1" = configure ]; then
    # make sure the user exists
    if ! getent passwd ${{app_name}} > /dev/null; then
        adduser --system $quiet --home /var/lib/${{app_name}} --no-create-home --shell /bin/false --group \
            --gecos "${{app_name}} node" ${{app_name}}
    fi
    # if the user was created manually, make sure the group is there as well
    if ! getent group ${{app_name}} > /dev/null; then
        addgroup --system $quiet ${{app_name}}
    fi
    # make sure ${{app_name}} is in the ${{app_name}} group
    if ! id -Gn ${{app_name}} | grep -qw ${{app_name}}; then
        adduser $quiet ${{app_name}} ${{app_name}}
    fi

    # ensure home directory ownership
    mkdir -p /var/lib/${{app_name}}
    chown -R ${{app_name}}:${{app_name}} /var/lib/${{app_name}}
    chown -R ${{app_name}}:${{app_name}} /usr/share/${{app_name}}

    # nicer log directory permissions
    mkdir -p /var/log/${{app_name}}
    chmod 770 /var/log/${{app_name}}
    chown root:${{app_name}} /var/log/${{app_name}}

    if [ -f /etc/${{app_name}}/acryl.json ]; then
        mv /etc/${{app_name}}/acryl.json /etc/${{app_name}}/acryl.json.bak
    fi

    if [ ! -f "$config_file" ]; then
        echo Creating default config file ...
        cp /usr/share/${{app_name}}/doc/acryl.conf.sample "$config_file"
        chmod 600 "$config_file"
        chown ${{app_name}}:${{app_name}} "$config_file"
    fi

    if is_systemd; then
        echo Installing systemd service ...
        addService ${{app_name}}
    elif is_upstart; then
        echo Installing upstart service ...
        initctl reload-configuration
    fi

    echo "Detecting old node version (0.15)..."
    if [ -d "$old_home_directory" ]; then
        echo "Found old node home directory"
        if [ -f "$old_home_directory/acryl_wallet" ]; then
          echo "Copying old node wallet file..."
          cp "$old_home_directory/acryl_wallet" /var/lib/${{app_name}}
          echo "Old node file copied"
        else
          echo "Old wallet file not found. Perhaps node is not initialized"
        fi
    fi
    if [ -d "$old_data_directory" ]; then
        echo "Found old node data version in ${old_home_directory}"
        echo "Restoring old blockchain (v0.15)... "
        echo "Removing old cron jobs"
        if crontab -r; then
            echo "cron jobs removed"
        else
            echo "crtontab failed, perhaps there is no jobs"
        fi
        echo "Checking old node process..."
        if node_pid=$(pgrep --full "/home/acryl/acryl.jar"); then
            echo "Stopping current node process..."
            kill $node_pid
            while kill -0 $node_pid; do
                sleep 1
            done
            echo "Node process stopped"
        else
            echo "No node process found"
        fi
        if systemctl is-active --quiet ${{app_name}}; then
            systemctl stop ${{app_name}}
        fi
        echo "Exporting old blockchain to file..."
        cd $old_home_directory
        java -cp acryl.jar com.wavesplatform.Exporter acryl.conf "old_blockchain"
        blockchain_file_name=$(ls old_blockchain* | head -n 1)
        echo "Export finished successfully. File $blockchain_file_name"
        mv "$blockchain_file_name" /var/lib/${{app_name}}
        cd /var/lib/${{app_name}}
        echo "Importing old blockchain..."
        if acryl --input-file "$blockchain_file_name"; then
            echo "Import finished successfully"
            rm "$blockchain_file_name"
            echo "Removing old data..."
            rm -Rf "$old_data_directory"
        else
            echo "Blockchain import failed"
        fi
    else
        echo "Old node files not found"
    fi
fi

exit 0
